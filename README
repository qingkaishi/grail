***************************************************************
*********  GRAIL (improved, Client/Server version) ************
**** Author :   Hilmi YILDIRIM,  Yilin Zheng    ***************
**** please contact yildih2@cs.rpi.edu for any problems *******
**** 11510506@mail.sustc.edu.cn for any problems **************
******************* related to C/S version ********************
***************************************************************

The code is associated with the following papers:
1) Grail: scalable reachability index for large graphs ( VLDB'10 paper)
and
2) GRAIL: A Scalable Index for Reachability Queries in Very Large Graphs (journal version, under review)

Detailed usage is explained below, here we give sample usage
for the main methods of the papers above.  
---------------------------------------------------------------
1) ./server sample.gra -test sample.test -dim 2 -t -2 -ltype 1 # to start server
2) ./client <IP address> # to start client
---------------------------------------------------------------

This package is provided for the repeatability purposes. It may
contain some (experimental )sections that is not mentioned in 
the paper. PLEASE READ THE INSTRUCTIONS CAREFULLY
to run the program flawlessly. Feel free to use it for
research purposes.

  
The code is written in c++ and built on the codebase
of the paper PathTree (by Jin et al.). It uses the
same graph format.

To compile :
make

To run :

- Server: ./Server <graph file> <other arguments...>

- Client: ./Client <IP address>

The query the result :

- input: 
      <src1> <dest1>
      <src2> <dest2>
      <src3> <dest3>
      <src4> <dest4>
      ...
      over
- output:
      True or False
      True or Falae
      True or False
      ...

Usage:
 grail [-h] <filename> -test <testfilename> [-dim <DIM>] [-skip] [-ex] [-ltype <labelingtype>] [-t <alg_type>]
Description:
        -h                      Print the help message.
  <filename> is the name of the input graph in gra format.
        -test           Set the queryfile which contains a line of <source> <target> <reachability> for each query. 
        -dim            Set the number of traversals to be performed. The default value is 5.
        -ex             Use exception lists method instead of pruning. Default is not using exception lists.
        -skip           Skip the phase converting the graph into a dag. Use only when the input is already a DAG.
        -t <alg_type>           alg_type can take 8 different values.  Default value is 1.
                         1  : Basic Search (used in the original VLDB'10 paper) 
                         2  : Basic Search + Level Filter 
                         3  : Bidirectional Search 
                         6  : Bidirectional Search + Level Filter 
                         -1 : Positive Cut + Basic Search
                         -2 : Positive Cut + Basic Search + Level Filter (usually provides the best query times) 
                         -3 : Positive Cut + Bidirectional Search 
                         -6 : Positive Cut + Bidirectional Search + Level Filter
        -ltype <labeling_type>          labeling_type can take 6 different values.  Default value is 0.
                         0  : Completely randomized traversals.  
                         1  : Randomized Reverse Pairs Traversals (usually provides the best quality) 
                         2  : Heuristicly Guided Traversal: Maximum Volume First 
                         3  : Heuristicly Guided Traversal: Maximum of Minimum Interval First 
                         4  : Heuristicly Guided Traversal: Maximum Adjusted Volume First 
                         5  : Heuristicly Guided Traversal: Maximum of Adjusted Minimum Volume First 


INPUT GRAPH FORMAT: (see sample.gra)
 Notes : Second line gives the number of nodes n. The node ids should be in [0,n-1]. 

TEST FILE FORMAT: (see sample.test)
 - Each line contains triples (<source> <target> <reachability>)
 The program compares its output with <reachability> value of each query and prints a success ratio which is supposed to be 1.
 However if you dont know the ground truth, (i.e. for very large graphs) 
     you can give any value for <reachability> and ignore the success ratio.

 
GRAPH is already a DAG:
In this case please use -skip option to avoid recomputation of strongly connected components.

Selection of Dimensionality:
For sparse graphs. (avg. degree up to 3) -dim 2 is quite optimal.
For denser graphs, you can increase it up to 5. 

Selection of Labeling Type:
The best labeling type in our experiments is reverse pairs. (-ltype 1)
Please see the paper for details of different labelings.

Selection of the Algorithm:
The best algorithm in our experiments is (-t -2)
Please see the paper for details of different algorithms.

The program reports the success rate, construction time, query time and the memory usage. 


Principle of Client/Server version:

The method to handle parallel queries is by forking subprocess to run the queries. Every client can send multiple
queries with "over" ending. Also, multiple clients can connect to the same server at the same time, and the server 
will fork subprocess to deal with the query. The queue size of the server can be reset in `Server.cpp` and its 
default value is 10. OpenMP is used to parallelize the `for` loops so as to provide parallel queries.

How Query the Server can Handle:

After starting the client, the user can input `<src> <dest>` to send the queries and finally send "over" to inform the server that
all queries are been sent and then the server will handle these queries and send back the result with either "True" or 
"False".

How to Run:

1. `make` to get executable program: server, client
2. `./server <graph file>` (The binded IP address is the current host), successfully run the server will get promption.
3. `./client <IP address>` to run the client, if succeed, the client will be ready to send queris to server.

Reference:

https://blog.csdn.net/qq_38880380/article/details/80341482